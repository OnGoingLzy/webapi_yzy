using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
namespace webapi_yzy.common
{
    public class yinhaiTool
    {
        private int keySize = 2048; // 密钥大小 单位bit
        private string publicKey = "";//公钥
        private string privateKey = "";//私钥
        private string yinhaiServer = "";//银海接口服务器

        public string GetPublicKey()
        {
            using (RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(keySize))
            {
                return rsaProvider.ToXmlString(false);
            }
        }

        //content加密内容 publicKey 公钥
        public string Encrypt(string content)
        {
            try
            {
                byte[] dataToEncrypt = Encoding.UTF8.GetBytes(content);
                using (RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(keySize))
                {
                    rsaProvider.FromXmlString(publicKey);
                    int maxLength = (keySize / 8) - 11; // 去除校验位后117字节有效内容

                    // 没有超过117字节则直接返回加密内容
                    if (dataToEncrypt.Length <= maxLength)
                    {
                        byte[] encryptedData = rsaProvider.Encrypt(dataToEncrypt, false);
                        return Convert.ToBase64String(encryptedData);
                    }
                    else
                    {
                        List<byte> encryptedDataList = new List<byte>();
                        int index = 0;

                        // 嵌套加密
                        while (index < dataToEncrypt.Length)
                        {
                            int remainingBytes = dataToEncrypt.Length - index;
                            int bytesToCopy = Math.Min(remainingBytes, maxLength);

                            byte[] chunk = new byte[bytesToCopy];
                            Array.Copy(dataToEncrypt, index, chunk, 0, bytesToCopy);

                            byte[] encryptedChunk = rsaProvider.Encrypt(chunk, false);
                            encryptedDataList.AddRange(encryptedChunk);

                            index += bytesToCopy;
                        }

                        return Convert.ToBase64String(encryptedDataList.ToArray());
                    }
                }
            }
            catch (Exception ex)
            {
                // 处理加密错误
                return null;
            }
        }

        //content解密内容 privateKey 私钥
        public string Decrypt(string content)
        {
            try
            {
                byte[] encryptedData = Convert.FromBase64String(content);
                using (RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(keySize))
                {
                    rsaProvider.FromXmlString(privateKey);
                    int maxLength = (keySize / 8);

                    if (encryptedData.Length <= maxLength)
                    {
                        byte[] decryptedData = rsaProvider.Decrypt(encryptedData, false);
                        return Encoding.UTF8.GetString(decryptedData);
                    }
                    else
                    {
                        List<byte> decryptedDataList = new List<byte>();
                        int index = 0;

                        while (index < encryptedData.Length)
                        {
                            int remainingBytes = encryptedData.Length - index;
                            int bytesToCopy = Math.Min(remainingBytes, maxLength);

                            byte[] chunk = new byte[bytesToCopy];
                            Array.Copy(encryptedData, index, chunk, 0, bytesToCopy);

                            byte[] decryptedChunk = rsaProvider.Decrypt(chunk, false);
                            decryptedDataList.AddRange(decryptedChunk);

                            index += bytesToCopy;
                        }

                        return Encoding.UTF8.GetString(decryptedDataList.ToArray());
                    }
                }
            }
            catch (Exception ex)
            {
                // 处理解密错误
                return null;
            }
        }



        //发送http请求公共方法
        //url 请求的地址 method 请求的方法(GET 或者post，del等等) contentType 请求内容类型
        /*调用样例：
                yinhaiTool yhtool = new yinhaiTool();
                string url = "https://example.com/api/resource";
                HttpMethod method = HttpMethod.Get; // 或者 HttpMethod.Post
                string contentType = "application/json"; // 根据需要设置
                JObject response = await yhtool.SendHttpRequestAsync(url, method, contentType);

                // 处理响应数据
                string reqStatus = response["reqStatus"].ToString();
                if (reqStatus == "成功")
                {
                    // 请求成功，处理响应数据
                }
                else
                {
                    string error = response["error"].ToString();
                    // 处理请求失败情况
                }
         */
        public async Task<JObject> SendHttpRequestAsync(string url, HttpMethod method, string contentType)
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    // 设置请求的方法
                    HttpRequestMessage request = new HttpRequestMessage(method, url);

                    // 设置请求头
                    if (!string.IsNullOrEmpty(contentType))
                    {
                        request.Headers.Add("Accept", contentType);
                    }

                    // 发送请求并获取响应
                    HttpResponseMessage response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseContent = await response.Content.ReadAsStringAsync();
                        JObject responseData = JObject.Parse(responseContent);
                        responseData["reqStatus"] = "成功";
                        return responseData;
                    }
                    else
                    {
                        JObject errorResponse = new JObject
                    {
                        { "reqStatus", "失败" },
                        { "error", "HTTP请求失败" }
                    };
                        return errorResponse;
                    }
                }
            }
            catch (Exception ex)
            {
                // 捕获异常，返回包含错误信息的 JObject
                JObject errorResponse = new JObject
            {
                { "reqStatus", "失败" },
                { "error", ex.Message }
            };
                return errorResponse;
            }
        }

    }
}
